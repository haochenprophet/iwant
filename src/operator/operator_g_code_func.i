#ifndef OPERATOR_G_CODE_FUNC_I
#define OPERATOR_G_CODE_FUNC_I
void operator_add_objects(Object *p)
{
	p->addMe(g_addition.where());
	p->addMe(g_address_operator.where());
	p->addMe(g_add_assign.where());
	p->addMe(g_angle_brackets.where());
	p->addMe(g_apostrophe.where());
	p->addMe(g_array_subscript.where());
	p->addMe(g_assign_direct.where());
	p->addMe(g_at_operator.where());
	p->addMe(g_big_brackets.where());
	p->addMe(g_bitwise_not.where());
	p->addMe(g_bit_and.where());
	p->addMe(g_bit_and_assign.where());
	p->addMe(g_bit_or.where());
	p->addMe(g_bit_or_assign.where());
	p->addMe(g_bit_xor.where());
	p->addMe(g_bit_xor_assign.where());
	p->addMe(g_block_comment.where());
	p->addMe(g_comma_operator.where());
	p->addMe(g_conditional_operator.where());
	p->addMe(g_const_cast_operator.where());
	p->addMe(g_decrease_prefix.where());
	p->addMe(g_decrease_suffix.where());
	p->addMe(g_delete_array.where());
	p->addMe(g_delete_memory.where());
	p->addMe(g_dereference_operator.where());
	p->addMe(g_direct_member_operator.where());
	p->addMe(g_divide_assign.where());
	p->addMe(g_division.where());
	p->addMe(g_dollar_operator.where());
	p->addMe(g_double_quotes.where());
	p->addMe(g_dynamic_cast_operator.where());
	p->addMe(g_end_operator.where());
	p->addMe(g_equal_operator.where());
	p->addMe(g_expression_grouping.where());
	p->addMe(g_function_call.where());
	p->addMe(g_hashtag.where());
	p->addMe(g_increment_prefix.where());
	p->addMe(g_increment_suffix.where());
	p->addMe(g_indirect_member_operator.where());
	p->addMe(g_indirect_member_release.where());
	p->addMe(g_joiner_operator.where());
	p->addMe(g_less_than.where());
	p->addMe(g_less_than_equal.where());
	p->addMe(g_line_comment.where());
	p->addMe(g_logic_and.where());
	p->addMe(g_logic_not.where());
	p->addMe(g_logic_or.where());
	p->addMe(g_member_release.where());
	p->addMe(g_mold_assign.where());
	p->addMe(g_mold_remainder.where());
	p->addMe(g_more_than.where());
	p->addMe(g_more_than_equal.where());
	p->addMe(g_multiplication.where());
	p->addMe(g_multiply_assign.where());
	p->addMe(g_negative_sign.where());
	p->addMe(g_new_array.where());
	p->addMe(g_new_memory.where());
	p->addMe(g_not_equal.where());
	p->addMe(g_null_operator.where());
	p->addMe(g_operator.where());
	p->addMe(g_positive_sign.where());
	p->addMe(g_reinterpret_cast_operator.where());
	p->addMe(g_scope_operator.where());
	p->addMe(g_semicolon_operator.where());
	p->addMe(g_shift_left.where());
	p->addMe(g_shift_left_assign.where());
	p->addMe(g_shift_right.where());
	p->addMe(g_shift_right_assign.where());
	p->addMe(g_sizeof_operator.where());
	p->addMe(g_space_operator.where());
	p->addMe(g_static_cast_operator.where());
	p->addMe(g_substruction.where());
	p->addMe(g_sub_assign.where());
	p->addMe(g_throw_operator.where());
	p->addMe(g_typeid_operator.where());
	p->addMe(g_type_conversion.where());
	p->addMe(g_value_construction.where());

}
#endif
